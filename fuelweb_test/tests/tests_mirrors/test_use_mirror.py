#    Copyright 2015 Mirantis, Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.

from proboscis.asserts import assert_true
from proboscis import test
from proboscis import SkipTest

from fuelweb_test.settings import DEPLOYMENT_MODE
from fuelweb_test.settings import NEUTRON_SEGMENT
from fuelweb_test.tests.base_test_case import SetupEnvironment
from fuelweb_test.tests.base_test_case import TestBasic
from fuelweb_test import logger


@test(groups=['fuel-mirror'])
class TestUseMirror(TestBasic):
    """Tests custom mirrors to deploy environment.

    Full documentation is in fuel-qa-docs in /doc folder of fuel-qa. It is
    autogenerated and can be found by keyword 'mirror'.

    This test doesn't only checks create mirror utility but also state of our
    mirrors. Most probable problem is absence of packet. It is possible that
    OS now requires new package for bootstrap, or puppet has new dependency
    that is not reflected in our mirror.
    """

    @test(groups=['fuel-mirror', 'use-mirror'],
          depends_on=[SetupEnvironment.prepare_slaves_5])
    def deploy_with_custom_mirror(self):
        """Create mirror for deployment without internet dependencies.

        Scenario:
            1. Create cluster with neutron networking
            2. Add 3 nodes with controller role
            3. Add 1 node with compute role and 1 node with cinder role
            4. Run create, apply commands for Ubuntu mirrors
            5. Check that only Ubuntu mirrors were changed
            6. Run create, apply commands for mos mirrors
            7. Check than mos mirrors were also changed
            8. Run network verification
            9. Deploy the cluster
            10. Run OSTF
            11. Create snapshot

        Duration 90m
        Snapshot deploy_with_custom_mirror
        """
        self.env.revert_snapshot('ready_with_5_slaves')
        admin_ip = self.ssh_manager.admin_ip

        self.show_step(1, initialize=True)
        cluster_id = self.fuel_web.create_cluster(
            name=self.__class__.__name__,
            mode=DEPLOYMENT_MODE,
            settings={
                "net_provider": 'neutron',
                "net_segment_type": NEUTRON_SEGMENT['tun'],
                'sahara': True,
                'murano': True,
                'ceilometer': True,
                'volumes_lvm': True,
                'volumes_ceph': False,
                'images_ceph': True
            }
        )

        self.show_step(2)
        self.show_step(3)
        self.fuel_web.update_nodes(
            cluster_id,
            {
                'slave-01': ['controller'],
                'slave-02': ['controller'],
                'slave-03': ['controller'],
                'slave-04': ['compute'],
                'slave-05': ['cinder']
            }
        )

        self.show_step(4)
        create_cmd = 'fuel-mirror create -P ubuntu -G ubuntu'
        self.ssh_manager.execute_on_remote(ip=admin_ip, cmd=create_cmd)
        apply_cmd = 'fuel-mirror apply -P ubuntu -G ubuntu'
        self.ssh_manager.execute_on_remote(ip=admin_ip, cmd=apply_cmd)

        self.show_step(5)
        cluster_repos = self.fuel_web.get_cluster_repos(cluster_id)['value']
        ubuntu_repos = [repo for repo in cluster_repos
                        if 'ubuntu' in repo['name']]
        mos_repos = [repo for repo in cluster_repos
                     if 'mos-' in repo['name'] or 'Auxilary' in repo['name']]
        remote_ubuntu_repos = [repo for repo in ubuntu_repos
                               if admin_ip not in repo['uri'] and
                               '{settings.MASTER_IP}' not in repo['uri']]
        remote_mos_repos = [repo for repo in mos_repos
                            if admin_ip not in repo['uri'] and
                            '{settings.MASTER_IP}' not in repo['uri']]
        message = "All: {0} \nMos: {1} \nR ubuntu: {2}\nR MOS: {3}".format(
            cluster_repos,
            mos_repos,
            remote_ubuntu_repos,
            remote_mos_repos)
        logger.info(message)

        assert_true(not remote_ubuntu_repos,
                    message="There is still some remote Ubuntu repositories: "
                            "{repos}".format(repos=remote_ubuntu_repos))
        assert_true(mos_repos == remote_mos_repos,
                    message="Some MOS repos became local:{repos}".format(
                            set(mos_repos) - set(remote_mos_repos)))

        self.show_step(6)
        create_cmd = 'fuel-mirror create -P ubuntu -G mos'
        self.ssh_manager.execute_on_remote(ip=admin_ip, cmd=create_cmd)
        apply_cmd = 'fuel-mirror apply -P ubuntu -G mos'
        self.ssh_manager.execute_on_remote(ip=admin_ip, cmd=apply_cmd)

        self.show_step(7)
        cluster_repos = self.fuel_web.get_cluster_repos(cluster_id)['value']
        remote_repos = [repo for repo in cluster_repos
                        if admin_ip not in repo['uri'] and
                        '{settings.MASTER_IP}' not in repo['uri']]
        message = "Cluster repos: {0}".format(cluster_repos)
        logger.info(message)
        assert_true(not remote_repos,
                    message="There is still some remote MOS repositories: "
                            "{repos}".format(repos=remote_repos))

        self.show_step(8)
        self.fuel_web.verify_network(cluster_id)
        self.show_step(9)
        self.fuel_web.deploy_cluster_wait(cluster_id)

        self.show_step(10)
        self.fuel_web.run_ostf(
            cluster_id=cluster_id,
            test_sets=['ha', 'smoke', 'sanity'])

        self.show_step(11)
        self.env.make_snapshot('deploy_with_custom_mirror')

    @test(groups=['fuel-mirror', 'use-mirror'])
    def deploy_no_official_access(self):
        # TODO(akostrikov) add firewall rules to verify that there is no
        # connection to official mirrors during mirror creation and deployment.
        raise SkipTest('Not implemented yet')

    @test(groups=['fuel-mirror', 'use-mirror'])
    def deploy_with_proxy(self):
        # TODO(akostrikov) add tests to verify that fuel-mirror works with
        # proxies too.
        raise SkipTest('Not implemented yet')
